public class advanced_patterns {
    public static void Hollow_rectangle(int rows, int col) {   //outer loop
        for (int i = 1; i <= rows; i++) {
            // inner -columns
            for (int j = 1; j <= col; j++) {
                //cell-(i,j)
                if (i == 1 || i == rows || j == 1 || j == col) {
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

    public static void inverted(int n)
    {
        //outer
        for(int i =1;i<=n;i++)
        {
            // spaces
            for(int j =1;j<=n-i;j++)
            {
                System.out.print(" ");
            }
            // stars
            for(int j =1;j<=i;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
    public static void invertednumbers(int n )
    {
        for (int i =1;i<=n;i++)
        {
            //inner - numbers
            for(int j =1;j<=n-i+1;j++)
            {
                System.out.print(j +" ");

            }
            System.out.println();
        }
    }
    public static void zeronetriangle(int n)
    {
        for (int i =1;i<=n;i++)
        {
            for(int j =1;j<=i;j++)
            {
                if((i+j)%2==0)
                {
                    System.out.print("1");
                }
                else
                {
                    System.out.print("0");
                }
            }
            System.out.println();
        }
    }
    public static void butterfly(int n)
    {
        // 1st half
        for (int i =1;i<=n;i++)
        {
            //stars-i
            for (int j=1;j<=i;j++)
            {
                System.out.print("*");
            }
            //spaces2*(n-i)
            for(int j=1;j<=2*(n-i);j++)
            {
                System.out.print(" ");
            }
            // stars-i
            for (int j=1;j<=i;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
        //2nd half
        for(int i=n;i>=1;i--)
        {
            //stars-i
            for (int j=1;j<=i;j++)
            {
                System.out.print("*");
            }
            //spaces2*(n-i)
            for(int j=1;j<=2*(n-i);j++)
            {
                System.out.print(" ");
            }
            // stars-i
            for (int j=1;j<=i;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
    public static void rhombus(int n) {
        for (int i=1;i<=n;i++)
        {
            //spaces
            for(int j=1;j<=(n-i);j++)
            {
                System.out.print(" ");
            }
            //stars
            for(int j=1;j<=n;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }


    }
    public static void hollow(int n)
    {
        for(int i=1;i<=n;i++)
        {
            //spaces
            for(int j=1;j<=(n-i);j++)
            {
                System.out.print(" ");
            }
            //hollow rectangle - stars
            for (int j=1;j<=n;j++)
            {
                if(i==1||i==n||j==1|| j==n)
                {
                    System.out.print("*");
                }
                else
                {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
    public static void diamond(int n) {
        //1st half
        for (int i = 1; i <= n; i++) {
            //spaces
            for (int j = 1; j <= (n - i); j++) {
                System.out.print(" ");
            }
            //stars
            for (int j = 1; j <= (2 * i) - 1; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        //2nd half
        for (int i = n; i >= 1; i--) {
            //spaces
            for (int j = 1; j <= (n - i); j++) {
                System.out.print(" ");
            }
            //stars
            for (int j = 1; j <= (2 * i) - 1; j++) {
                System.out.print("*");
            }
            System.out.println();
        }


    }

    public static void main(String  args []) {
        //Hollow_rectangle(6,6);
        //inverted(7);
        //invertednumbers(6);
        //zeronetriangle(6);
        //butterfly(5);
        //rhombus(5);
        //hollow(5);
        //diamond(8);

    }

}
